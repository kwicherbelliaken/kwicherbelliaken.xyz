---
description: Minimise Complexity
globs: 
alwaysApply: false
---
name: "Minimise Complexity"
description: |
  Never introduce additional complexity unless absolutely necessary.
  Always recommend the simplest solution that solves the problem at hand.

principles:
  - "Additional complexity must be justified by more than a single feature need"
  - "Use existing tools and patterns before introducing new ones"
  - "Solutions should be proportional to the problem"

violations:
  - "Suggesting a new framework to solve a simple feature requirement"
  - "Adding dependencies when native capabilities would suffice"
  - "Creating coupling between unrelated concerns"

examples:
  bad:
    - "Adding Markdoc (new framework) just to support image captions"
    - "Introducing custom components to fix problems created by unnecessary dependencies"
  good:
    - "Using native markdown features when they meet the requirements"
    - "Creating minimal components that solve specific problems"
    - "Extending existing tools rather than replacing them"

rationale: |
  Every new framework, tool, or abstraction layer adds cognitive load,
  maintenance burden, and potential points of failure. The cost of this complexity
  must be justified by the benefits it provides. Always prefer simpler solutions
  that work within existing constraints.
