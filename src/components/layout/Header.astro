---
import { menuLinks } from "@/site-config";
import { Icon } from "astro-icon/components";

import Search from "../Search.astro";
import ThemeToggle from "../ThemeToggle.astro";

const url = new URL(Astro.request.url);

const desktopNavLinksClass =
	"sm:static sm:z-auto sm:-ms-4 sm:mt-1 sm:flex sm:flex-row sm:items-center sm:divide-x sm:divide-dashed sm:divide-link sm:rounded-none sm:bg-transparent sm:py-0 sm:shadow-none sm:backdrop-blur-none";

// The class "top-[calc(100%+2px)]" pins the mobile navigation menu right below the header. It matches the header's height on mobile, plus the bottom border.
const mobileNavLinksClass =
	"top-[calc(100%+2px)] group-[.menu-open]:z-50 group-[.menu-open]:flex group-[.menu-open]:w-full group-[.menu-open]:left-0";
---

<header
	class="fixed left-0 top-0 z-50 w-full border-b-2 border-b-fgColour-accent bg-bgColour-default p-2"
>
	<div
		class="group flex w-full flex-row items-center justify-between align-middle"
		id="main-header"
	>
		<a
			aria-current={url.pathname === "/" ? "page" : false}
			class="inline-flex items-center px-4 grayscale hover:filter-none sm:relative sm:inline-block"
			href="/"
		>
			<Icon class="h-12 w-auto sm:h-16" name="logo" />
		</a>
		<nav
			aria-label="Main menu"
			class={`absolute hidden flex-col items-end gap-y-4 rounded-md rounded-t-none bg-bgColour-default/[.85] py-4 shadow backdrop-blur ${mobileNavLinksClass} ${desktopNavLinksClass}`}
			id="navigation-menu"
		>
			{
				menuLinks.map((link) => (
					<a
						aria-current={url.pathname === link.path ? "page" : false}
						class="px-4 py-4 underline-offset-2 hover:kwicherbelliaken-link sm:py-0 sm:hover:underline"
						data-astro-prefetch
						href={link.path}
					>
						{link.title}
					</a>
				))
			}
		</nav>
		<!-- <Search /> -->
		<!-- <ThemeToggle /> -->
		<mobile-button class="group relative sm:invisible sm:hidden">
			<button
				aria-expanded="false"
				aria-haspopup="menu"
				aria-label="Open main menu"
				class="ms-4 h-7 w-7"
				id="toggle-navigation-menu"
				type="button"
			>
				<svg
					aria-hidden="true"
					class="absolute start-1/2 top-1/2 h-full w-full -translate-x-1/2 -translate-y-1/2 transition-all group-aria-expanded:scale-0 group-aria-expanded:opacity-0"
					fill="none"
					focusable="false"
					id="line-svg"
					stroke="currentColor"
					stroke-width="1.5"
					viewBox="0 0 24 24"
					xmlns="http://www.w3.org/2000/svg"
				>
					<path d="M3.75 9h16.5m-16.5 6.75h16.5" stroke-linecap="round" stroke-linejoin="round"
					></path>
				</svg>
				<svg
					aria-hidden="true"
					class="absolute start-1/2 top-1/2 h-full w-full -translate-x-1/2 -translate-y-1/2 scale-0 text-fgColour-accent opacity-0 transition-all group-aria-expanded:scale-100 group-aria-expanded:opacity-100"
					class="text-fgColour-accent"
					fill="none"
					focusable="false"
					id="cross-svg"
					stroke="currentColor"
					stroke-width="1.5"
					viewBox="0 0 24 24"
					xmlns="http://www.w3.org/2000/svg"
				>
					<path d="M6 18L18 6M6 6l12 12" stroke-linecap="round" stroke-linejoin="round"></path>
				</svg>
			</button>
		</mobile-button>
	</div>
</header>

<script>
	import { toggleClass } from "@/utils";

	class MobileNavBtn extends HTMLElement {
		private headerEl: HTMLElement;
		private menuOpen: boolean;
		private mobileButtonEl: HTMLButtonElement;

		toggleMobileMenu = () => {
			toggleClass(this.headerEl, "menu-open");
			this.menuOpen = !this.menuOpen;
			this.mobileButtonEl.setAttribute("aria-expanded", this.menuOpen.toString());
		};

		constructor() {
			super();
			this.headerEl = document.getElementById("main-header")!;
			this.mobileButtonEl = this.querySelector("button") as HTMLButtonElement;
			this.menuOpen = false;

			this.mobileButtonEl.addEventListener("click", this.toggleMobileMenu);
		}
	}

	customElements.define("mobile-button", MobileNavBtn);
</script>
