---
import type { GetStaticPaths, Page } from "astro";
import type { CollectionEntry } from "astro:content";

import Pagination from "@/components/Paginator.astro";
import Tag from "@/components/Tag.astro";
import PostPreview from "@/components/blog/PostPreview.astro";
import { getAllPosts, getUniqueTags, groupPostsByYear, sortMDByDate } from "@/data/post";
import PageLayout from "@/layouts/Base.astro";

export const getStaticPaths = (async ({ paginate }) => {
	const MAX_POSTS_PER_PAGE = 10;
	const allPosts = await getAllPosts();
	const allPostsByDate = sortMDByDate(allPosts);
	const uniqueTags = getUniqueTags(allPosts);
	return paginate(allPostsByDate, { pageSize: MAX_POSTS_PER_PAGE, props: { uniqueTags } });
}) satisfies GetStaticPaths;

interface Props {
	page: Page<CollectionEntry<"post">>;
	uniqueTags: string[];
}

const { page, uniqueTags } = Astro.props;

const meta = {
	description: "Read my collection of posts and the things that interest me",
	title: "Posts",
};

const paginationProps = {
	...(page.url.prev && {
		prevUrl: {
			text: `← Previous Page`,
			url: page.url.prev,
		},
	}),
	...(page.url.next && {
		nextUrl: {
			text: `Next Page →`,
			url: page.url.next,
		},
	}),
};

const groupedByYear = groupPostsByYear(page.data);
const descYearKeys = Object.keys(groupedByYear).sort((a, b) => +b - +a);
---

<PageLayout meta={meta}>
	<h1 class="mb-6">Posts</h1>
	<div class="grid gap-y-16 sm:grid-cols-[3fr_1fr] sm:gap-x-8">
		<section aria-label="Blog post list">
			{
				descYearKeys.map((yearKey) => (
					<>
						<h2>{yearKey}</h2>
						<ul class="mb-8 mt-6 space-y-8 text-start">
							{groupedByYear[yearKey]?.map((p) => (
								<li class="grid gap-2 sm:grid-cols-[auto_1fr] sm:[&_q]:col-start-2">
									<PostPreview post={p} />
								</li>
							))}
						</ul>
					</>
				))
			}
			<Pagination {...paginationProps} />
		</section>
		{
			!!uniqueTags.length && (
				<aside>
					<h2 class="mb-4 flex items-center">
						<svg
							aria-hidden="true"
							class="h-6 w-6"
							fill="none"
							stroke="currentColor"
							stroke-linecap="round"
							stroke-linejoin="round"
							stroke-width="1.5"
							viewBox="0 0 24 24"
							xmlns="http://www.w3.org/2000/svg"
						>
							<path d="M0 0h24v24H0z" fill="none" stroke="none" />
							<path d="M7.859 6h-2.834a2.025 2.025 0 0 0 -2.025 2.025v2.834c0 .537 .213 1.052 .593 1.432l6.116 6.116a2.025 2.025 0 0 0 2.864 0l2.834 -2.834a2.025 2.025 0 0 0 0 -2.864l-6.117 -6.116a2.025 2.025 0 0 0 -1.431 -.593z" />
							<path d="M17.573 18.407l2.834 -2.834a2.025 2.025 0 0 0 0 -2.864l-7.117 -7.116" />
							<path d="M6 9h-.01" />
						</svg>
						Tags
					</h2>
					<ul class="text-bgColor flex flex-wrap gap-2">
						{uniqueTags.map((tag) => (
							<li>
								<Tag size="small">
									<a aria-label={`View all posts with the tag: ${tag}`} href={`/tags/${tag}/`}>
										{tag}
									</a>
								</Tag>
							</li>
						))}
					</ul>
					<span class="mt-4 block sm:text-end">
						<a
							aria-label="View all blog categories"
							class="sm:hover:text-fgColour-accent"
							href="/tags/"
						>
							View all →
						</a>
					</span>
				</aside>
			)
		}
	</div>
</PageLayout>
